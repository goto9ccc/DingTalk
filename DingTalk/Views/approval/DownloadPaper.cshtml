@{
    Layout = null;
}

<!--右侧实体内容-->
<el-main id="partPage" style="position:relative;">
    <div class="head-fixed" onclick="loadPage('/Main/approval')">
        <i class="el-icon-arrow-left"></i>
        下发图纸
    </div>

    <div>
        <span>项目名称</span>
        <el-select v-model="project" v-on:change="selectProject">
            <el-option v-for="item in projectList"
                       :key="item"
                       :label="item"
                       :value="item">
            </el-option>
        </el-select>
    </div>

    <div class="custom-tree-container">
       
        <div class="block">
            <p>使用 scoped slot</p>
            <el-tree :data="data5"
                     show-checkbox
                     node-key="id"
                     default-expand-all
                     :props="defaultProps"
                     :expand-on-click-node="false">
                    <template class="custom-tree-node" slot-scope="{ node, data }">
                        <button>hello?</button>
                        <span>{{ node.label }}</span>
                        <img src="~/Content/images/title.png" />
                        <span>
                            <el-button type="text"
                                       size="mini"
                                       v-on:click="() => append(data)">
                                Append
                            </el-button>
                            <el-button type="text"
                                       size="mini"
                                       v-on:click="() => remove(node, data)">
                                Delete
                            </el-button>
                        </span>
                    </template>
            </el-tree>
        </div>

        <div class="block">
            <p>使用 render-content</p>
            <el-tree :data="data4"
                     show-checkbox
                     node-key="id"
                     default-expand-all
                     :expand-on-click-node="false"
                     :render-content="renderContent">
            </el-tree>
        </div>
    </div>

</el-main>

<script>
    let no = 1000

    var demo = new Vue({
        el: "#partPage",
        mixins: [mixin],
        data: function () {
            const data = [{
                id: 1,
                label: '一级 1',
                children: [{
                    id: 4,
                    label: '二级 1-1',
                    children: [{
                        id: 9,
                        label: '三级 1-1-1'
                    }, {
                        id: 10,
                        label: '三级 1-1-2'
                    }]
                }]
            }, {
                id: 2,
                label: '一级 2',
                children: [{
                    id: 5,
                    label: '二级 2-1'
                }, {
                    id: 6,
                    label: '二级 2-2'
                }]
            }, {
                id: 3,
                label: '一级 3',
                children: [{
                    id: 7,
                    label: '二级 3-1'
                }, {
                    id: 8,
                    label: '二级 3-2'
                }]
            }]
            return {
                projectList: ['1','22','333'],
                project: '',
                data4: JSON.parse(JSON.stringify(data)),
                data5: JSON.parse(JSON.stringify(data)),
                defaultProps: {
                    children: 'children',
                    label: 'label'
                },
                ruleForm: {
                    name: '',
                    reson: '',
                }
            }
        },
        methods: {
            onSubmit() {
                console.log('submit!');
            },
            selectProject(project) {

            },
            append(data) {
                const newChild = { id: no++, label: 'testtest', children: [] };
                if (!data.children) {
                    this.$set(data, 'children', []);
                }
                data.children.push(newChild);
            },
            remove(node, data) {
                const parent = node.parent;
                const children = parent.data.children || parent.data;
                const index = children.findIndex(d => d.id === data.id);
                children.splice(index, 1);
            },

            renderContent(h, { node, data, store }) {
                return (
                    `<span class="custom-tree-node">
                        <span>{node.label}</span>
                        <span>
                            <el-button size="mini" type="text" >Append</el-button>
                            <el-button size="mini" type="text" >Delete</el-button>
                        </span>
                    </span>`
                );
            }
        },
        created: function () {
            loadHtml("mainPage", "partPage")
        }
    })


</script>



